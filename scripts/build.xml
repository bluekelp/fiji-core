<?xml version="1.0"?>
<project name="fiji" basedir=".." default="all">

<!-- FIJI the ForthIsh Java Interpreter is copyright *C* 1998-2001 by Jack J. Woehr
     P.O. Box 51, Golden, Colorado 80402-0051 USA
     jwoehr@softwoehr.com jwoehr@fiji.sourceforge.net
     http://www.softwoehr.com http://fiji.sourceforge.net -->

    <!-- Instruct how to use this file.  -->
    <target name="usage">
        <echo>

            USING ant TO BUILD FIJI.

            This script is written to reside in $CVSROOT/scripts/ but
            to be invoked from the level immediately above the tree. A good
            way to invoke it is to cd into the base directory and enter:

                ant -f scripts/build.xml [-Dvar=val [-Dvar=val ...]] target

            Targets are:

                all     .. builds Fiji and makes a jar of it.
                clean   .. deletes the jar and all class files.
                distrib .. builds Fiji, makes the jar, generates javadocs
                           and builds the distribution zip file.
                jar     .. builds the jar (and Fiji if necessary).
                javadoc .. generates javadoc for Fiji.
                usage   .. displays this message.

            The behavior of the build is controlled by passing variables on the
            command line to this build script. You pass in a variable by adding
            a java-style -Dvar=value switch to the ant command line.

            The variables are shown below with their default values. Elements
            in {curly braces} indicate the variables whose substitutions will
	    be made at build time to compose the new variable.
                
                fiji.release=1.2_beta
                fiji.source.directory=.
                fiji.destination.directory=.
                fiji.jar.filename=fiji.{fiji.release}.jar
                fiji.jar.manifest.filename=fiji.{fiji.release}.mf
                fiji.javadoc.destination.directory={fiji.destination.directory}/html/doc
                fiji.compile.debug=false
                fiji.zipfile.filename=fiji.{fiji.release}.zip
        </echo>
    </target>

    <!-- Define properties and announce them.  -->
    <target name="init">
        <property name="fiji.release" value="1.2_beta"/>
        <property name="fiji.source.directory" value="."/>
        <property name="fiji.destination.directory" value="."/>
        <property name="fiji.jar.filename" value="fiji.${fiji.release}.jar"/>
        <property name="fiji.jar.fully.qualified.pathname" value="${fiji.destination.directory}/${fiji.jar.filename}"/>
        <property name="fiji.jar.manifest.filename" value="fiji.${fiji.release}.mf"/>
        <property name="fiji.javadoc.destination.directory" value="${fiji.destination.directory}/html/doc"/>
        <property name="fiji.compile.debug" value="false"/>
	<property name="fiji.zipfile.filename" value="fiji.${fiji.release}.zip"/>
	<property name="fiji.zipfile.fully.qualified.pathname" value="${fiji.destination.directory}/${fiji.zipfile.filename}"/>
        <echo>
	   Values of all properties for this build:
	   ----------------------------------------
           fiji.release=${fiji.release}
           fiji.source.directory=${fiji.source.directory}
           fiji.destination.directory=${fiji.destination.directory}
           fiji.jar.filename=${fiji.jar.filename} <!-- fiji.jar.fully.qualified.pathname=${fiji.jar.fully.qualified.pathname} -->
           fiji.jar.manifest.filename=${fiji.jar.manifest.filename}
           fiji.javadoc.destination.directory=${fiji.javadoc.destination.directory}
           fiji.compile.debug=${fiji.compile.debug}
           fiji.zipfile.filename=${fiji.zipfile.filename} <!-- fiji.zipfile.fully.qualified.pathname=${fiji.zipfile.fully.qualitfied.pathname} -->
        </echo>
    </target>

    <!-- Compile FIJI.  -->
    <target name="compile" depends="init">
        <!-- Both srcdir and destdir should be package roots. -->
        <!-- They could be different of course; in that case NetBeans can also be set -->
        <!-- up to compile to a different filesystem in the same way; see Compiler Types: -->
        <javac srcdir="${fiji.source.directory}" destdir="${fiji.destination.directory}" debug="${fiji.compile.debug}" deprecation="true">
            <exclude name="com/SoftWoehr/util/SQL*.java"/>
            <exclude name="com/SoftWoehr/JaXWT/*IFS*.java"/>
            <exclude name="com/SoftWoehr/FIJI/examples/**"/>
        </javac>
    </target>

    <!-- Build a jar of the compiled classes and source code combined.  -->
    <target name="jar" depends="init,compile">
        <!-- To make a standalone app: -->
        <!-- 1. Create a myapp.mf manifest somewhere. -->
        <!-- 2. Put in it: -->
        <!--    Manifest-Version: 1.0 -->
        <!--    Main-Class: com.foo.Main -->
        <!-- 3. Pass to <jar>: manifest="myapp.mf" -->
       <jar jarfile="${fiji.jar.fully.qualified.pathname}" compress="true" basedir="${fiji.destination.directory}">
            <include name="com/**/*.*"/>
            <exclude name="${fiji.source.directory}/com/SoftWoehr/util/SQL*.*"/>
            <exclude name="${fiji.destination.directory}/com/SoftWoehr/util/SQL*.*"/>
            <exclude name="${fiji.source.directory}/com/SoftWoehr/JaXWT/*IFS*.*"/>
            <exclude name="${fiji.destination.directory}/com/SoftWoehr/JaXWT/*IFS*.*"/>
            <exclude name="**.jar"/>
       </jar>
    </target>

    <!-- Compile and build the jar. Pretty safe for a default target.  -->
    <target name="all" depends="init,jar" description="Build everything.">
        <echo message="Fiji built"/>
    </target>

    <!-- Generate FIJI's javadocs -->
    <target name="javadoc" depends="init" description="Javadoc for my API.">
        <mkdir dir="${fiji.javadoc.destination.directory}"/>
        <javadoc packagenames="com.*" destdir="${fiji.javadoc.destination.directory}">
            <sourcepath>
                <pathelement location="${fiji.source.directory}"/>
            </sourcepath>
       </javadoc>
    </target>

    <!-- Build the zip archive for the distribution. -->
    <target name="gen_zipfile" depends="init">
        <delete file="${fiji.zipfile.filename}"/>
        <zip basedir="${fiji.destination.directory}" zipfile="${fiji.zipfile.filename}" excludes="${fiji.zipfile.filename},com/**,CVSROOT/**,**/CVS/**,**/.nbattrs"/>
    </target>

    <!-- Copy the readmes and license from the doc dirs to the top dir for zipping.  -->
    <target name="copy_readmes" depends="init">
        <copy todir="${fiji.destination.directory}">
	    <fileset dir="${fiji.destination.directory}/html/FIJI">
	        <exclude name="**/*.html"/>
	        <exclude name="**/CVS"/>
		<exclude name="moredoc/**"/>
	    </fileset>
	</copy>
    </target>

    <!-- Build a .zip distribution archive for posting on the Internet.  -->
    <target name="distrib" depends="init,jar,javadoc" description="build distribution archive">
        <antcall target="copy_readmes"/>
	<antcall target="gen_zipfile"/>
    </target>

    <!-- Delete the class files, jar file, javadocs, zip file and the readmes we copied to the root. -->
    <target name="clean" depends="init" description="Clean all build products.">
        <delete>
            <fileset dir="${fiji.destination.directory}">
                <include name="**/*.class"/>
		<include name="COPYING*"/>
		<include name="README.TXT"/>
            </fileset>
        </delete>
	<delete file="${fiji.zipfile.fully.qualified.pathname}"/>
        <delete file="${fiji.jar.fully.qualified.pathname}"/>
        <delete dir="${fiji.javadoc.destination.directory}"/>
    </target>

</project>
