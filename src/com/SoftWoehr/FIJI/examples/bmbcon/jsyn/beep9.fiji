\ beep9.fiji ... make sound... (9th version)\
\ Published by B M B con. See accompanying readme.1st file\
\ Author: Roelf Toxopeus email: postbus@bmbcon2.demon.nl \
\ Last modified: 1 Feb 2001 rt \

\ variation on beep6.fiji\
\ using mousemap routines for changing pitch and delay between beeps \
\ last code modification: 2 Aug 2000 rt\

\ ***************************the generators*********************\

\ for our unit generator instances \
value myBeep
value myAdder
value myDelay
value myDelayOut1
value myDelayOut2
value myEnvPlayer
value myEnv
value myOut

\ we need an array with storage for 3 pairs of doubles to be used by the envelope-player\
value envData
6 dArray to envData

: set-envData	\ double index -  \
	envData dArray! ;

: get-envData	\ index - double \
	envData dArray@ ;

: fillup-envData
	0.10 >double 0 set-envData 1.0 >double 1 set-envData	\ attack \
	0.30 >double 2 set-envData 0.5 >double 3 set-envData	\ sustain/decay \
	0.80 >double 4 set-envData 0.0 >double 5 set-envData ;	\ release	\

\ some values \
value maxDelay 1.0 >double to maxDelay	\ 2.0 is really maximum\
value outDelay 0.5 >double to outDelay 

: create-unit-generators
	sine-oscillator to myBeep
	adder to myAdder
	maxDelay delay-unit to myDelay
	outDelay delay-unit to myDelayOut1
	outDelay delay-unit to myDelayOut2
	envelope-player to myEnvPlayer
	envData envelope to myEnv
	line-out to myOut ;

: connect-units
	output myBeep @ connect ( inputC myAdder @ , ) drop
	output myDelay @ connect ( inputA myAdder @ , ) drop
	output myAdder @ connect ( input myDelay @ , ) drop
	output myDelay @ connect ( amplitude myEnvPlayer @ , ) drop
	output myEnvPlayer @ connect ( input myDelayOut1 @ , ) drop
	output myEnvPlayer @ connect ( input myDelayOut2 @ , ) drop
	output myDelayOut1 @ connect ( 0 Long>intparam , input myOut @ , 0 Long>intparam , ) drop
	output myDelayOut2 @ connect ( 0 Long>intparam , input myOut @ , 1 Long>intparam , ) drop
;

: start-units
	myEnvPlayer start ( ) drop
	myBeep start ( ) drop
	myDelay start ( ) drop
	myDelayOut1 start ( ) drop
	myDelayOut2 start ( ) drop
	myAdder start ( ) drop
	myOut start ( ) drop ;

: stop-units
	myEnvPlayer stop ( ) drop
	myBeep stop ( ) drop
	myDelay stop ( ) drop
	myDelayOut1 stop ( ) drop
	myDelayOut2 stop ( ) drop
	myAdder stop ( ) drop
	myOut stop ( ) drop ;

\ execute this word at the beginning of your session\
: setup-system
	fillup-envData
	start-engine create-unit-generators connect-units start-units ;

\ do this word when you're done\
: stop-system
	stop-units stop-engine ;

\ *****************************control************************\

\ control beep's loudness \
: set-amplitude	\ double -- \
	amplitude myBeep @ set ( 3 roll (primitive) , )  drop ;

\ control beep's frequency\
: set-frequency \ double -- \
	frequency myBeep @ set ( 3 roll (primitive) , )  drop ;

\ control amount delayed beep back into adder\ 
: set-feedback	\ double -- \
	inputB myAdder @ set ( 3 roll (primitive) , ) drop ;

\ control delay time\
: set-delay	\ double -- \
	delay myDelay @ set ( 3 roll (primitive) , ) drop ;

\ control delayed output1\
: set-delayout1	\ double -- \
	delay myDelayOut1 @ set ( 3 roll (primitive) , ) drop ;

\ control delayed output2\
: set-delayout2	\ double -- \
	delay myDelayOut2 @ set ( 3 roll (primitive) , ) drop ;

\ pass data in envData to envelope\
: newEnv
	myEnv write ( 0 Long>intparam , envData , 0 Long>intparam , 3 Long>intparam , ) drop ;
 
\ shape and sound the beep\
: trigger-sound
	envelopePort myEnvPlayer @ clear ( ) drop
	envelopePort myEnvPlayer @ queue ( myEnv , )  drop ;

\ an example to make some sound\

: random-pitch
	dRandom
	440.0 >double d*
	60.0 >double d+
	set-frequency ;

: controled-pitch
	xcontrol set-frequency ;

: random-amplitude
	0.10 >double 0.45 >double dalea set-amplitude ;

: random-feedback
	0.05 >double 1.00 >double dalea set-feedback ;

: random-delay
	0.05 >double maxDelay dalea set-delay ;

: controled-delay
	ycontrol set-delay ;

: random-env
	0.01 >double 0.10 >double dalea 0 set-envData
	0.50 >double 1.00 >double dalea 1 set-envData
	0.01 >double 0.30 >double dalea 2 set-envData
	0.50 >double 1.00 >double dalea 3 set-envData
	0.05 >double 0.80 >double dalea 4 set-envData
	0.00 >double                               5 set-envData
	newEnv ;

: random-delayout1
	0.01 >double 0.10 >double dalea set-delayout1 ;

: random-delayout2
	0.01 >double 0.10 >double dalea set-delayout2 ;

: create-sound
	controled-pitch
	random-amplitude  random-feedback random-delay
	random-env random-delayout1 random-delayout2 ;

\ ***************************topwords************************\

\ a finite sound event \
: beep
	create-sound
	trigger-sound ;

\ like a pause, but with 'long' sleep time, beep can 'totaly develop till end' \
: resonate
	y>tics dup 0 = if drop 1 then choose sleep ;	

\ perceived as my sound stream, a possible infinite sound event \
\ cpu speed is very important factor!\
: tt begin beep resonate key? until ;
 
\ *****************************eof****************************\